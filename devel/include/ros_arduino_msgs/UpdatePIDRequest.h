// Generated by gencpp from file ros_arduino_msgs/UpdatePIDRequest.msg
// DO NOT EDIT!


#ifndef ROS_ARDUINO_MSGS_MESSAGE_UPDATEPIDREQUEST_H
#define ROS_ARDUINO_MSGS_MESSAGE_UPDATEPIDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_arduino_msgs
{
template <class ContainerAllocator>
struct UpdatePIDRequest_
{
  typedef UpdatePIDRequest_<ContainerAllocator> Type;

  UpdatePIDRequest_()
    : Kp(0.0)
    , Kd(0.0)
    , Ki(0.0)
    , Ko(0.0)  {
    }
  UpdatePIDRequest_(const ContainerAllocator& _alloc)
    : Kp(0.0)
    , Kd(0.0)
    , Ki(0.0)
    , Ko(0.0)  {
  (void)_alloc;
    }



   typedef float _Kp_type;
  _Kp_type Kp;

   typedef float _Kd_type;
  _Kd_type Kd;

   typedef float _Ki_type;
  _Ki_type Ki;

   typedef float _Ko_type;
  _Ko_type Ko;





  typedef boost::shared_ptr< ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UpdatePIDRequest_

typedef ::ros_arduino_msgs::UpdatePIDRequest_<std::allocator<void> > UpdatePIDRequest;

typedef boost::shared_ptr< ::ros_arduino_msgs::UpdatePIDRequest > UpdatePIDRequestPtr;
typedef boost::shared_ptr< ::ros_arduino_msgs::UpdatePIDRequest const> UpdatePIDRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_arduino_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'ros_arduino_msgs': ['/home/daruis1/repos/minesweepersbot/src/ros_arduino_bridge/ros_arduino_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81f9af76f898bdd520f26b42602a5eb2";
  }

  static const char* value(const ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81f9af76f898bdd5ULL;
  static const uint64_t static_value2 = 0x20f26b42602a5eb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_arduino_msgs/UpdatePIDRequest";
  }

  static const char* value(const ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Kp\n"
"float32 Kd\n"
"float32 Ki\n"
"float32 Ko\n"
;
  }

  static const char* value(const ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Kp);
      stream.next(m.Kd);
      stream.next(m.Ki);
      stream.next(m.Ko);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UpdatePIDRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_arduino_msgs::UpdatePIDRequest_<ContainerAllocator>& v)
  {
    s << indent << "Kp: ";
    Printer<float>::stream(s, indent + "  ", v.Kp);
    s << indent << "Kd: ";
    Printer<float>::stream(s, indent + "  ", v.Kd);
    s << indent << "Ki: ";
    Printer<float>::stream(s, indent + "  ", v.Ki);
    s << indent << "Ko: ";
    Printer<float>::stream(s, indent + "  ", v.Ko);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_ARDUINO_MSGS_MESSAGE_UPDATEPIDREQUEST_H
